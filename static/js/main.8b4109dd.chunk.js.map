{"version":3,"sources":["sounds/sound_success.mp3","sounds/sound_failure.mp3","img/return.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","successSound","Audio","successSoundUrl","failureSound","failureSoundUrl","App","useState","darkMode","setDarkMode","soundsAvailable","setSoundsAvailabilitty","difficulty","setDifficulty","randomWord","setRandomWord","mixedWordBeforeTip","setMixedWordBeforeTip","mixedWordAfterTip","setMixedWordAfterTip","startGame","getRandomWord","levels","min","max","words","Math","floor","random","playSound","sound","currentTime","play","useEffect","wordBeforeMixing","split","afterMixing","length","index","splice","className","onClick","title","src","returnIcon","alt","tipLetter","replace","askForTip","onSubmit","e","preventDefault","target","text","value","toLowerCase","type","name","minLength","maxLength","placeholder","htmlFor","onChange","checked","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b4109dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/return.d61c552e.png\";","import React, { useState, useEffect } from \"react\";\nimport successSoundUrl from \"./sounds/sound_success.mp3\";\nimport failureSoundUrl from \"./sounds/sound_failure.mp3\";\n\nimport \"./scss/main.css\";\n\nimport words from \"./words.json\";\n\nimport returnIcon from \"./img/return.png\";\n\nconst successSound = new Audio(successSoundUrl);\nconst failureSound = new Audio(failureSoundUrl);\n\nconst App = () => {\n  const [darkMode, setDarkMode] = useState(true);\n  const [soundsAvailable, setSoundsAvailabilitty] = useState(true);\n  const [difficulty, setDifficulty] = useState(0);\n  const [randomWord, setRandomWord] = useState(\"\");\n  const [mixedWordBeforeTip, setMixedWordBeforeTip] = useState(\"\");\n  const [mixedWordAfterTip, setMixedWordAfterTip] = useState(\"\");\n\n  function startGame(difficulty) {\n    setDifficulty(difficulty);\n  }\n\n  useEffect(() => {\n    if (difficulty > 0) {\n      getRandomWord();\n    }\n  }, [difficulty]); // eslint-disable-line\n\n  function getRandomWord() {\n    const levels = [0, 100, 500, 1000, 2000, 5000];\n\n    const min = levels[difficulty - 1];\n    const max = levels[difficulty] - min;\n\n    const randomWord = words[min + Math.floor(Math.random() * max)];\n    setMixedWordBeforeTip(\"\");\n    setRandomWord(randomWord);\n  }\n\n  useEffect(() => {\n    if (randomWord !== \"\") {\n      let wordBeforeMixing = randomWord.split(\"\");\n\n      let afterMixing = \"\";\n\n      while (wordBeforeMixing.length > 0) {\n        const index = Math.floor(Math.random() * wordBeforeMixing.length);\n        afterMixing += wordBeforeMixing.splice(index, 1);\n      }\n\n      setMixedWordAfterTip(afterMixing);\n    }\n  }, [randomWord]);\n\n  function returnBack() {\n    setDifficulty(0);\n  }\n\n  function askForTip() {\n    if (mixedWordAfterTip.length > 0) {\n      const tipLetter =\n        randomWord[randomWord.length - mixedWordAfterTip.length];\n      setMixedWordBeforeTip(mixedWordBeforeTip + tipLetter);\n      setMixedWordAfterTip(mixedWordAfterTip.replace(tipLetter, \"\"));\n    }\n  }\n\n  function skipWord() {\n    getRandomWord();\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (e.target.text.value.toLowerCase() === randomWord.toLowerCase()) {\n      getRandomWord();\n      e.target.text.value = \"\";\n      playSound(successSound);\n    } else {\n      playSound(failureSound);\n    }\n  }\n\n  function playSound(sound) {\n    if (soundsAvailable) {\n      sound.currentTime = 0;\n      sound.play();\n    }\n  }\n\n  return (\n    <div className={`App ${darkMode ? \"dark\" : \"\"}`}>\n      {difficulty === 0 ? (\n        <div className=\"difficulty\">\n          <h1>Choose difficulty:</h1>\n          <button onClick={() => startGame(1)}>Easy</button>\n          <button onClick={() => startGame(2)}>Medium</button>\n          <button onClick={() => startGame(3)}>Difficult</button>\n          <button onClick={() => startGame(4)}>Pro</button>\n          <button onClick={() => startGame(5)}>Impossible</button>\n        </div>\n      ) : (\n        <div className=\"game\">\n          <div className=\"mixed-word\" title=\"Guess this word\">\n            <span className=\"mixed-word-tip\">{mixedWordBeforeTip}</span>\n            {mixedWordAfterTip}\n          </div>\n          <button\n            className=\"return\"\n            title=\"Return to the menu\"\n            onClick={() => returnBack()}\n          >\n            <img src={returnIcon} alt=\"Return img\" />\n          </button>\n          <button\n            className=\"tip\"\n            title=\"Ask for a tip\"\n            onClick={() => askForTip()}\n          >\n            Tip\n          </button>\n          <button\n            className=\"skip\"\n            title=\"Skip this word\"\n            onClick={() => skipWord()}\n          >\n            Skip\n          </button>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"text\"\n              minLength={randomWord.length}\n              maxLength={randomWord.length}\n              placeholder=\"Answer\"\n            />\n          </form>\n        </div>\n      )}\n\n      <div className=\"settings\">\n        <label htmlFor=\"dark-mode\">\n          <p>Dark Mode</p>\n          <input\n            onChange={e => setDarkMode(e.target.checked)}\n            checked={darkMode}\n            type=\"checkbox\"\n            name=\"dark-mode\"\n            id=\"dark-mode\"\n          />\n          <span className=\"slider\"></span>\n        </label>\n        <label htmlFor=\"turn-on-sound\">\n          <p>Sound</p>\n          <input\n            onChange={e => setSoundsAvailabilitty(e.target.checked)}\n            checked={soundsAvailable}\n            type=\"checkbox\"\n            name=\"turn-on-sound\"\n            id=\"turn-on-sound\"\n          />\n          <span className=\"slider\"></span>\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n/*\n  THINGS TO DO\n  Publish go github\n  Publish to gh-pages\n  Add some kind of preloader\n  Come up with some scoring system\n  Add some scoring system - maybe\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}