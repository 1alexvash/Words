{"version":3,"sources":["sounds/sound_success.mp3","sounds/sound_failure.mp3","img/winning-cup.png","components/Preloader.js","components/Difficulty.js","components/Score.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Preloader","useState","preloaderShown","setPreloaderVisiblity","setTimeout","className","Difficulty","startGame","onClick","Score","gameLevel","gameLevels","score","style","width","src","winningCup","alt","Settings","setDarkMode","darkMode","setSoundsAvailabilitty","soundsAvailable","htmlFor","onChange","e","target","checked","type","name","id","successSound","Audio","successSoundUrl","failureSound","failureSoundUrl","App","setGameLevel","setScore","difficulty","setDifficulty","randomWord","setRandomWord","mixedWordBeforeTip","setMixedWordBeforeTip","mixedWordAfterTip","setMixedWordAfterTip","isFirstRun","useRef","getRandomWord","listOfWords","min","max","words","Math","floor","random","playSound","sound","currentTime","play","useEffect","current","newScore","parseInt","localStorage","forEach","level","index","wordBeforeMixing","split","afterMixing","length","splice","returnBack","askForTip","tipLetter","replace","skipWord","handleSubmit","preventDefault","text","value","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc00f738.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/winning-cup.9b7b3453.png\";","import React, { useState } from \"react\";\r\n\r\nconst Preloader = () => {\r\n  const [preloaderShown, setPreloaderVisiblity] = useState(true);\r\n\r\n  setTimeout(() => {\r\n    setPreloaderVisiblity(false);\r\n  }, 5000);\r\n\r\n  return preloaderShown ? (\r\n    <div className=\"preloader\">\r\n      <div className=\"content\">\r\n        {\" \"}\r\n        <div className=\"text\">\r\n          <div className=\"title\">Words</div>\r\n          <div className=\"loading\">\r\n            Loading{\" \"}\r\n            <span className=\"dots\">\r\n              <span className=\"dot dot-one\">.</span>\r\n              <span className=\"dot dot-two\">.</span>\r\n              <span className=\"dot dot-three\">.</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from \"react\";\r\n\r\nconst Difficulty = ({ startGame }) => {\r\n  return (\r\n    <div className=\"difficulty\">\r\n      <h1>Choose difficulty:</h1>\r\n      <button onClick={() => startGame(1)}>Easy</button>\r\n      <button onClick={() => startGame(2)}>Medium</button>\r\n      <button onClick={() => startGame(3)}>Difficult</button>\r\n      <button onClick={() => startGame(4)}>Pro</button>\r\n      <button onClick={() => startGame(5)}>Impossible</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Difficulty;\r\n","import React from \"react\";\r\n\r\nimport winningCup from \"../img/winning-cup.png\";\r\n\r\nconst Score = ({ gameLevel, gameLevels, score }) => {\r\n  return (\r\n    <div className=\"score\">\r\n      <div className=\"progress\">\r\n        <div\r\n          className=\"bar\"\r\n          style={{\r\n            width: `${((score - gameLevels[gameLevel]) /\r\n              (gameLevels[gameLevel + 1] - gameLevels[gameLevel])) *\r\n              100 +\r\n              \"%\"}`\r\n          }}\r\n        ></div>\r\n        Level {gameLevel + 1}\r\n      </div>\r\n      <div className=\"points\">\r\n        [{score}/{gameLevels[gameLevel + 1]}]\r\n        <img src={winningCup} className=\"icon\" alt=\"Winning Cup\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\n\r\nconst Settings = ({\r\n  setDarkMode,\r\n  darkMode,\r\n  setSoundsAvailabilitty,\r\n  soundsAvailable\r\n}) => {\r\n  return (\r\n    <div className=\"settings\">\r\n      <label htmlFor=\"dark-mode\">\r\n        <p>Dark Mode</p>\r\n        <input\r\n          onChange={e => setDarkMode(e.target.checked)}\r\n          checked={darkMode}\r\n          type=\"checkbox\"\r\n          name=\"dark-mode\"\r\n          id=\"dark-mode\"\r\n        />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n      <label htmlFor=\"turn-on-sound\">\r\n        <p>Sound</p>\r\n        <input\r\n          onChange={e => setSoundsAvailabilitty(e.target.checked)}\r\n          checked={soundsAvailable}\r\n          type=\"checkbox\"\r\n          name=\"turn-on-sound\"\r\n          id=\"turn-on-sound\"\r\n        />\r\n        <span className=\"slider\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport successSoundUrl from \"./sounds/sound_success.mp3\";\nimport failureSoundUrl from \"./sounds/sound_failure.mp3\";\n\nimport Preloader from \"./components/Preloader\";\nimport Difficulty from \"./components/Difficulty\";\nimport Game from \"./components/Difficulty\";\nimport Score from \"./components/Score\";\nimport Settings from \"./components/Settings\";\n\nimport \"./scss/main.css\";\n\nimport words from \"./words.json\";\n\nconst successSound = new Audio(successSoundUrl);\nconst failureSound = new Audio(failureSoundUrl);\n\nconst gameLevels = [0, 10, 25, 50, 80, 125, 200, 300, 500, 1000];\n\nconst App = () => {\n  const [gameLevel, setGameLevel] = useState(0);\n  const [score, setScore] = useState(0);\n  const [darkMode, setDarkMode] = useState(true);\n  const [soundsAvailable, setSoundsAvailabilitty] = useState(true);\n  const [difficulty, setDifficulty] = useState(0);\n  const [randomWord, setRandomWord] = useState(\"\");\n  const [mixedWordBeforeTip, setMixedWordBeforeTip] = useState(\"\");\n  const [mixedWordAfterTip, setMixedWordAfterTip] = useState(\"\");\n\n  function startGame(difficulty) {\n    setDifficulty(difficulty);\n  }\n\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      const newScore = parseInt(localStorage.score);\n      setScore(newScore);\n    } else {\n      localStorage.score = score;\n    }\n\n    gameLevels.forEach((level, index) => {\n      if (score >= level) {\n        setGameLevel(index);\n      }\n    });\n\n    // eslint-disable-next-line\n  }, [score]);\n\n  useEffect(() => {\n    if (difficulty > 0) {\n      getRandomWord();\n    }\n  }, [difficulty]); // eslint-disable-line\n\n  function getRandomWord() {\n    const listOfWords = [0, 100, 500, 1000, 2000, 5000];\n\n    const min = listOfWords[difficulty - 1];\n    const max = listOfWords[difficulty] - min;\n\n    const randomWord = words[min + Math.floor(Math.random() * max)];\n    setMixedWordBeforeTip(\"\");\n    setRandomWord(randomWord);\n  }\n\n  useEffect(() => {\n    if (randomWord !== \"\") {\n      let wordBeforeMixing = randomWord.split(\"\");\n\n      let afterMixing = \"\";\n\n      while (wordBeforeMixing.length > 0) {\n        const index = Math.floor(Math.random() * wordBeforeMixing.length);\n        afterMixing += wordBeforeMixing.splice(index, 1);\n      }\n\n      setMixedWordAfterTip(afterMixing);\n    }\n  }, [randomWord]);\n\n  function returnBack() {\n    setDifficulty(0);\n  }\n\n  function askForTip() {\n    if (mixedWordAfterTip.length > 0) {\n      const tipLetter =\n        randomWord[randomWord.length - mixedWordAfterTip.length];\n      setMixedWordBeforeTip(mixedWordBeforeTip + tipLetter);\n      setMixedWordAfterTip(mixedWordAfterTip.replace(tipLetter, \"\"));\n      setScore(score - 2);\n    }\n  }\n\n  function skipWord() {\n    getRandomWord();\n    setScore(score - 1);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (e.target.text.value.toLowerCase() === randomWord.toLowerCase()) {\n      getRandomWord();\n      e.target.text.value = \"\";\n      playSound(successSound);\n      setScore(score + 1 + 2 * difficulty);\n    } else {\n      playSound(failureSound);\n      setScore(score - 1);\n    }\n  }\n\n  function playSound(sound) {\n    if (soundsAvailable) {\n      sound.currentTime = 0;\n      sound.play();\n    }\n  }\n\n  return (\n    <div className={`App ${darkMode ? \"dark\" : \"\"}`}>\n      <Preloader />\n\n      {difficulty === 0 ? (\n        <Difficulty startGame={startGame} />\n      ) : (\n        <Game\n          returnBack={returnBack}\n          askForTip={askForTip}\n          skipWord={skipWord}\n          handleSubmit={handleSubmit}\n        />\n      )}\n\n      <Score gameLevel={gameLevel} gameLevels={gameLevels} score={score} />\n\n      <Settings\n        setDarkMode={setDarkMode}\n        darkMode={darkMode}\n        setSoundsAvailabilitty={setSoundsAvailabilitty}\n        soundsAvailable={soundsAvailable}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}